// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                String            @id @default(uuid())
  name              String
  email             String            @unique
  password          String
  role              UserRole          @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  imageUrl          String?
  books             Book[]
  ownedCollections  Collection[]      @relation("OwnedCollections")
  sharedCollections CollectionShare[]
  sharedNotes       NoteShare[]
  preferences       UserPreference[]
  progress          Progress[]
  notes             Note[]
  bookRatings       BookRating[]
  chapterRatings    ChapterRating[]
  authorRatings     AuthorRating[]
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
}

model Collection {
  id          String            @id @default(uuid())
  name        String
  description String?
  ownerId     String?
  isPublic    Boolean           @default(false)
  deletedAt   DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String?
  updatedBy   String?
  owner       User?             @relation("OwnedCollections", fields: [ownerId], references: [id], onDelete: Cascade)
  books       Book[]
  sharedWith  CollectionShare[]

  @@index([ownerId])
  @@index([isPublic])
  @@index([deletedAt])
  @@index([name])
}

model CollectionShare {
  collectionId String
  userId       String
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([collectionId, userId])
}

model Book {
  id                String       @id @default(uuid())
  workId            String?       // Identifier for grouping editions/languages of same work
  userId            String?
  collectionId      String?
  publisherId       String?
  title             String
  description       String?
  edition           String?
  editionPublished  Int?
  originalLanguage  String       @default("en")
  originalPublished Int?
  imageUrl          String?
  shoppingUrl       String?
  language          String       @default("en") // e.g. "en", "fr"
  slug              String?      @unique // SEO-friendly URL
  genre             String?      // Book categorization
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isPublic          Boolean      @default(false)
  deletedAt         DateTime?
  createdBy         String?
  updatedBy         String?
  orderInCollection Int?
  user              User?        @relation(fields: [userId], references: [id])
  collection        Collection?  @relation(fields: [collectionId], references: [id])
  publisher         Publisher?   @relation(fields: [publisherId], references: [id])
  chapters          Chapter[]
  tags              BookTag[]
  ratings           BookRating[]
  authors           BookAuthor[]
  Note              Note[]

  @@index([workId])
  @@index([userId])
  @@index([collectionId])
  @@index([publisherId])
  @@index([deletedAt])
  @@index([isPublic])
  @@index([language])
  @@index([originalLanguage])
  @@index([createdAt])
  @@index([title])
  @@index([genre])
  @@index([editionPublished])
  @@index([originalPublished])
  // Composite indexes for common query patterns
  @@index([workId, language]) // All editions of a work in specific language
  @@index([userId, deletedAt]) // User's books
  @@index([isPublic, deletedAt]) // Public books
  @@index([language, isPublic]) // Books by language
  @@index([publisherId, editionPublished]) // Books by publisher and year
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  books       BookTag[]
  chapters    ChapterTag[]
  authors     AuthorTag[]
  notes       NoteTag[]

  @@index([name])
  @@index([deletedAt])
}

model BookTag {
  bookId String
  tagId  String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([bookId, tagId])
}

model Chapter {
  id              String          @id @default(uuid())
  bookId          String
  title           String?
  content         String
  order           Int
  readingTimeEst  Int?            // Estimated reading time in minutes
  deletedAt       DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String?
  updatedBy       String?
  book            Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
  notes           Note[]
  progress        Progress[]
  tags            ChapterTag[]
  ratings         ChapterRating[]

  @@index([bookId])
  @@index([order])
  @@index([deletedAt])
  @@index([bookId, order]) // Composite for chapter ordering
}


model Progress {
  id        String   @id @default(uuid())
  userId    String
  chapterId String
  position  Int // e.g., character or word index in chapter
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
  @@index([updatedAt])
  @@index([userId, updatedAt]) // Recent reading activity
}

model Note {
  id            String    @id @default(uuid())
  userId        String
  bookId        String?
  chapterId     String
  startIndex    Int
  endIndex      Int
  text          String
  firstContent  String?
  secondContent String?
  thirdContent  String?
  isPublic      Boolean   @default(false)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?
  updatedBy     String?

  user       User        @relation(fields: [userId], references: [id])
  book       Book?       @relation(fields: [bookId], references: [id])
  chapter    Chapter?    @relation(fields: [chapterId], references: [id])
  tags       NoteTag[]
  sharedWith NoteShare[]

  @@index([userId])
  @@index([bookId])
  @@index([chapterId])
  @@index([deletedAt])
  @@index([isPublic])
  @@index([createdAt])
}

model NoteTag {
  noteId String
  tagId  String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
}

model Author {
  id        String         @id @default(uuid())
  name      String
  bio       String?
  deletedAt DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  books     BookAuthor[]
  tags      AuthorTag[]
  links     AuthorLink[]
  ratings   AuthorRating[]

  @@index([name])
  @@index([deletedAt])
}

model Publisher {
  id          String    @id @default(uuid())
  name        String
  description String?
  website     String?
  address     String?
  foundedYear Int?
  country     String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  books       Book[]

  @@index([name])
  @@index([country])
  @@index([deletedAt])
}

model BookAuthor {
  bookId   String
  authorId String
  position Int?   // Order of authors if it matters (primary author = 1, etc.)
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@id([bookId, authorId])
  @@index([bookId, position]) // For ordered author listing
}

model ChapterTag {
  chapterId String
  tagId     String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([chapterId, tagId])
}

model AuthorTag {
  authorId String
  tagId    String
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([authorId, tagId])
}

model AuthorLink {
  id       String  @id @default(uuid())
  authorId String
  url      String
  label    String?
  author   Author  @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model BookRating {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  rating    Int // e.g. 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([bookId])
  @@index([rating])
  @@index([createdAt])
}

model ChapterRating {
  id        String   @id @default(uuid())
  userId    String
  chapterId String
  rating    Int // e.g. 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@index([rating])
  @@index([createdAt])
}

model AuthorRating {
  id        String   @id @default(uuid())
  userId    String
  authorId  String
  rating    Int // e.g. 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([userId, authorId])
  @@index([authorId])
  @@index([rating])
  @@index([createdAt])
}

model NoteShare {
  noteId    String
  userId    String
  createdAt DateTime @default(now())
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([noteId, userId])
}
